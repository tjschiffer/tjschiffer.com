{"version":3,"sources":["webpack:///./reactManager.js","webpack:///./getCalculatedHexColor.js"],"names":["__webpack_require__","r","__webpack_exports__","_getCalculatedHexColor__WEBPACK_IMPORTED_MODULE_0__","default","initialize","console","log","getCalculatedHexColor","destroy","333","t","n","e","a","currentTime","Date","seed","getMinutes","getSeconds","Math","sin","PI","reduce","hexColor","func","round","max","toString","slice"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,KAUeE,EAAAE,SACbC,WATiB,WACjBC,QAAQC,IAAIC,gBASZC,QANc,WACdH,QAAQC,IAAI,cAAAG,IAAA,SAAAC,EAAAC,EAAAC,GAAA,aCICX,EAAAY,EAAA,WACb,IAAMC,EAAc,IAAIC,KAClBC,EAAOF,EAAYG,aAAeH,EAAYI,aAAe,GAGnE,OACE,SAAAP,GAAC,OAAIQ,KAAKC,IAAIT,EAAIQ,KAAKE,GAAK,KAC5B,SAAAV,GAAC,OAAIQ,KAAKC,IAAIT,EAAIQ,KAAKE,GAAK,GAAe,EAAVF,KAAKE,GAAS,IAC/C,SAAAV,GAAC,OAAIQ,KAAKC,IAAIT,EAAIQ,KAAKE,GAAK,GAAe,EAAVF,KAAKE,GAAS,KAC/CC,OAAO,SAACC,EAAUC,GAKlB,OADAD,GAAuB,IAFNJ,KAAKM,MAA8C,GAAxCN,KAAKO,IAAIF,EAAKR,GAAQ,IAAM,EAAI,EAAG,IAEzBW,SAAS,KAAKC,OAAO,IAE1D","file":"2.main.js","sourcesContent":["import getCalculatedHexColor from './getCalculatedHexColor'\n\nconst initialize = () => {\n  console.log(getCalculatedHexColor())\n}\n\nconst destroy = () => {\n  console.log('destroy')\n}\n\nexport default {\n  initialize,\n  destroy\n}\n","/**\n * Deterministic function that creates a\n * non-grey dark color using minutes from the most recent hour.\n *\n * See https://www.wolframalpha.com/input/?i=sin(PI+*+x%2F30)%2F1.5+%2B+1%2F3,+sin(PI+*+x%2F30+%2B+PI+*++2+%2F+3)%2F1.5+%2B+1%2F3,+sin(PI+*+x%2F30+%2B+PI+*+4+%2F+3)%2F1.5+%2B+1%2F3\n * to understand how the shifted sin function is used to\n * create deep reds, greens, blues, and in-between colors.\n * (When the y value goes below 0, that value will be 0).\n *\n * @returns {string}\n */\nexport default () => {\n  const currentTime = new Date()\n  const seed = currentTime.getMinutes() + currentTime.getSeconds() / 60\n  // Use shifted sin functions to create values between 0 and 50\n  // These Sine functions have a period of 60 minutes\n  return [\n    n => Math.sin(n * Math.PI / 30),\n    n => Math.sin(n * Math.PI / 30 + Math.PI * 2 / 3),\n    n => Math.sin(n * Math.PI / 30 + Math.PI * 4 / 3)\n  ].reduce((hexColor, func) => {\n    // Use provided function to generate a value between 0 and 50\n    const colorVal = Math.round(Math.max(func(seed) / 1.5 + 1 / 3, 0) * 50)\n    // Add the number as a hex number making sure it's a padding two digit number\n    hexColor = hexColor + ('0' + colorVal.toString(16)).slice(-2)\n    return hexColor\n  }, '#')\n}\n"],"sourceRoot":""}